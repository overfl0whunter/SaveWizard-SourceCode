using System;
using System.IO;
using System.Text;
using System.Xml;

namespace Rss
{
	// Token: 0x020000CA RID: 202
	public class RssWriter
	{
		// Token: 0x06000892 RID: 2194 RVA: 0x00033F90 File Offset: 0x00032190
		public RssWriter(TextWriter textWriter)
		{
			this.writer = new XmlTextWriter(textWriter);
		}

		// Token: 0x06000893 RID: 2195 RVA: 0x00033FE8 File Offset: 0x000321E8
		public RssWriter(Stream stream, Encoding encoding)
		{
			this.writer = new XmlTextWriter(stream, encoding);
		}

		// Token: 0x06000894 RID: 2196 RVA: 0x00034040 File Offset: 0x00032240
		public RssWriter(Stream stream)
		{
			this.writer = new XmlTextWriter(stream, Encoding.GetEncoding("ISO-8859-1"));
		}

		// Token: 0x06000895 RID: 2197 RVA: 0x000340A0 File Offset: 0x000322A0
		public RssWriter(string fileName, Encoding encoding)
		{
			this.writer = new XmlTextWriter(fileName, encoding);
		}

		// Token: 0x06000896 RID: 2198 RVA: 0x000340F8 File Offset: 0x000322F8
		public RssWriter(string fileName)
		{
			this.writer = new XmlTextWriter(fileName, Encoding.GetEncoding("ISO-8859-1"));
		}

		// Token: 0x06000897 RID: 2199 RVA: 0x00034158 File Offset: 0x00032358
		private void BeginDocument()
		{
			bool flag = !this.wroteStartDocument;
			if (flag)
			{
				bool flag2 = this.rssVersion == RssVersion.Empty;
				if (flag2)
				{
					this.rssVersion = RssVersion.RSS20;
				}
				this.writer.Formatting = this.xmlFormat;
				this.writer.Indentation = this.xmlIndentation;
				this.writer.WriteStartDocument();
				bool flag3 = this.rssVersion != RssVersion.RSS20;
				if (flag3)
				{
					this.writer.WriteComment("Generated by RSS.NET: http://rss-net.sf.net");
				}
				switch (this.rssVersion)
				{
				case RssVersion.RSS090:
					this.writer.WriteStartElement("RDF", "rdf", "http://www.w3.org/1999/02/22-rdf-syntax-ns#");
					break;
				case RssVersion.RSS091:
					this.writer.WriteStartElement("rss");
					this.writer.WriteDocType("rss", "-//Netscape Communications//DTD RSS 0.91//EN", "http://my.netscape.com/publish/formats/rss-0.91.dtd", null);
					this.writer.WriteAttributeString("version", "0.91");
					break;
				case RssVersion.RSS092:
					this.writer.WriteStartElement("rss");
					this.writer.WriteAttributeString("version", "0.92");
					break;
				case RssVersion.RSS10:
					throw new NotSupportedException("RDF Site Summary (RSS) 1.0 is not currently supported.");
				case RssVersion.RSS20:
					this.writer.WriteStartElement("rss");
					this.writer.WriteAttributeString("version", "2.0");
					foreach (object obj in this._rssModules)
					{
						RssModule rssModule = (RssModule)obj;
						this.WriteAttribute("xmlns:" + rssModule.NamespacePrefix, rssModule.NamespaceURL.ToString(), true);
					}
					break;
				}
				this.wroteStartDocument = true;
			}
		}

		// Token: 0x06000898 RID: 2200 RVA: 0x0003434C File Offset: 0x0003254C
		private void writeChannel(RssChannel channel)
		{
			bool flag = this.writer == null;
			if (flag)
			{
				throw new InvalidOperationException("RssWriter has been closed, and can not be written to.");
			}
			bool flag2 = channel == null;
			if (flag2)
			{
				throw new ArgumentNullException("Channel must be instanciated with data to be written.");
			}
			bool flag3 = this.wroteChannel;
			if (flag3)
			{
				this.writer.WriteEndElement();
			}
			else
			{
				this.wroteChannel = true;
			}
			this.BeginDocument();
			this.writer.WriteStartElement("channel");
			this.WriteElement("title", channel.Title, true);
			this.WriteElement("description", channel.Description, true);
			this.WriteElement("link", channel.Link, true);
			bool flag4 = channel.Image != null;
			if (flag4)
			{
				this.writer.WriteStartElement("image");
				this.WriteElement("title", channel.Image.Title, true);
				this.WriteElement("url", channel.Image.Url, true);
				this.WriteElement("link", channel.Image.Link, true);
				switch (this.rssVersion)
				{
				case RssVersion.RSS091:
				case RssVersion.RSS092:
				case RssVersion.RSS20:
					this.WriteElement("description", channel.Image.Description, false);
					this.WriteElement("width", channel.Image.Width, false);
					this.WriteElement("height", channel.Image.Height, false);
					break;
				}
				this.writer.WriteEndElement();
			}
			switch (this.rssVersion)
			{
			case RssVersion.RSS091:
			case RssVersion.RSS092:
			case RssVersion.RSS20:
			{
				this.WriteElement("language", channel.Language, this.rssVersion == RssVersion.RSS091);
				this.WriteElement("copyright", channel.Copyright, false);
				this.WriteElement("managingEditor", channel.ManagingEditor, false);
				this.WriteElement("webMaster", channel.WebMaster, false);
				this.WriteElement("pubDate", channel.PubDate, false);
				this.WriteElement("lastBuildDate", channel.LastBuildDate, false);
				bool flag5 = channel.Docs != "";
				if (flag5)
				{
					this.WriteElement("docs", channel.Docs, false);
				}
				else
				{
					switch (this.rssVersion)
					{
					case RssVersion.RSS091:
						this.WriteElement("docs", "http://my.netscape.com/publish/formats/rss-spec-0.91.html", false);
						break;
					case RssVersion.RSS092:
						this.WriteElement("docs", "http://backend.userland.com/rss092", false);
						break;
					case RssVersion.RSS20:
						this.WriteElement("docs", "http://backend.userland.com/rss", false);
						break;
					}
				}
				this.WriteElement("rating", channel.Rating, false);
				string[] array = new string[] { "monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday" };
				for (int i = 0; i <= 6; i++)
				{
					bool flag6 = channel.SkipDays[i];
					if (flag6)
					{
						this.writer.WriteStartElement("skipDays");
						for (int j = 0; j <= 6; j++)
						{
							bool flag7 = channel.SkipDays[j];
							if (flag7)
							{
								this.WriteElement("day", array[j], false);
							}
						}
						this.writer.WriteEndElement();
						break;
					}
				}
				for (int k = 0; k <= 23; k++)
				{
					bool flag8 = channel.SkipHours[k];
					if (flag8)
					{
						this.writer.WriteStartElement("skipHours");
						for (int l = 0; l <= 23; l++)
						{
							bool flag9 = channel.SkipHours[l];
							if (flag9)
							{
								this.WriteElement("hour", l + 1, false);
							}
						}
						this.writer.WriteEndElement();
						break;
					}
				}
				break;
			}
			}
			RssVersion rssVersion = this.rssVersion;
			if (rssVersion == RssVersion.RSS092 || rssVersion == RssVersion.RSS20)
			{
				bool flag10 = channel.Categories != null;
				if (flag10)
				{
					foreach (object obj in channel.Categories)
					{
						RssCategory rssCategory = (RssCategory)obj;
						bool flag11 = rssCategory.Name != "";
						if (flag11)
						{
							this.writer.WriteStartElement("category");
							this.WriteAttribute("domain", rssCategory.Domain, false);
							this.writer.WriteString(rssCategory.Name);
							this.writer.WriteEndElement();
						}
					}
				}
				bool flag12 = channel.Cloud != null;
				if (flag12)
				{
					this.writer.WriteStartElement("cloud");
					this.WriteElement("domain", channel.Cloud.Domain, false);
					this.WriteElement("port", channel.Cloud.Port, false);
					this.WriteElement("path", channel.Cloud.Path, false);
					this.WriteElement("registerProcedure", channel.Cloud.RegisterProcedure, false);
					bool flag13 = channel.Cloud.Protocol > RssCloudProtocol.Empty;
					if (flag13)
					{
						this.WriteElement("Protocol", channel.Cloud.Protocol, false);
					}
					this.writer.WriteEndElement();
				}
			}
			bool flag14 = this.rssVersion == RssVersion.RSS20;
			if (flag14)
			{
				bool flag15 = channel.Generator != "";
				if (flag15)
				{
					this.WriteElement("generator", channel.Generator, false);
				}
				else
				{
					this.WriteElement("generator", "RSS.NET: http://www.rssdotnet.com/", false);
				}
				this.WriteElement("ttl", channel.TimeToLive, false);
				foreach (object obj2 in this._rssModules)
				{
					RssModule rssModule = (RssModule)obj2;
					bool flag16 = rssModule.IsBoundTo(channel.GetHashCode());
					if (flag16)
					{
						foreach (object obj3 in rssModule.ChannelExtensions)
						{
							RssModuleItem rssModuleItem = (RssModuleItem)obj3;
							bool flag17 = rssModuleItem.SubElements.Count == 0;
							if (flag17)
							{
								this.WriteElement(rssModule.NamespacePrefix + ":" + rssModuleItem.Name, rssModuleItem.Text, rssModuleItem.IsRequired);
							}
							else
							{
								this.writeSubElements(rssModuleItem.SubElements, rssModule.NamespacePrefix);
							}
						}
					}
				}
			}
			bool flag18 = channel.TextInput != null;
			if (flag18)
			{
				this.writer.WriteStartElement("textinput");
				this.WriteElement("title", channel.TextInput.Title, true);
				this.WriteElement("description", channel.TextInput.Description, true);
				this.WriteElement("name", channel.TextInput.Name, true);
				this.WriteElement("link", channel.TextInput.Link, true);
				this.writer.WriteEndElement();
			}
			foreach (object obj4 in channel.Items)
			{
				RssItem rssItem = (RssItem)obj4;
				this.writeItem(rssItem, channel.GetHashCode());
			}
			this.writer.Flush();
		}

		// Token: 0x06000899 RID: 2201 RVA: 0x00034B64 File Offset: 0x00032D64
		private void writeItem(RssItem item, int channelHashCode)
		{
			bool flag = this.writer == null;
			if (flag)
			{
				throw new InvalidOperationException("RssWriter has been closed, and can not be written to.");
			}
			bool flag2 = item == null;
			if (flag2)
			{
				throw new ArgumentNullException("Item must be instanciated with data to be written.");
			}
			bool flag3 = !this.wroteChannel;
			if (flag3)
			{
				throw new InvalidOperationException("Channel must be written first, before writing an item.");
			}
			this.BeginDocument();
			this.writer.WriteStartElement("item");
			switch (this.rssVersion)
			{
			case RssVersion.RSS090:
			case RssVersion.RSS091:
			case RssVersion.RSS10:
				this.WriteElement("title", item.Title, true);
				this.WriteElement("description", item.Description, false);
				this.WriteElement("link", item.Link, true);
				goto IL_02A4;
			case RssVersion.RSS092:
				break;
			case RssVersion.RSS20:
			{
				bool flag4 = item.Title == "" && item.Description == "";
				if (flag4)
				{
					throw new ArgumentException("item title and description cannot be null");
				}
				break;
			}
			default:
				goto IL_02A4;
			}
			this.WriteElement("title", item.Title, false);
			this.WriteElement("description", item.Description, false);
			this.WriteElement("link", item.Link, false);
			bool flag5 = item.Source != null;
			if (flag5)
			{
				this.writer.WriteStartElement("source");
				this.WriteAttribute("url", item.Source.Url, true);
				this.writer.WriteString(item.Source.Name);
				this.writer.WriteEndElement();
			}
			bool flag6 = item.Enclosure != null;
			if (flag6)
			{
				this.writer.WriteStartElement("enclosure");
				this.WriteAttribute("url", item.Enclosure.Url, true);
				this.WriteAttribute("length", item.Enclosure.Length, true);
				this.WriteAttribute("type", item.Enclosure.Type, true);
				this.writer.WriteEndElement();
			}
			foreach (object obj in item.Categories)
			{
				RssCategory rssCategory = (RssCategory)obj;
				bool flag7 = rssCategory.Name != "";
				if (flag7)
				{
					this.writer.WriteStartElement("category");
					this.WriteAttribute("domain", rssCategory.Domain, false);
					this.writer.WriteString(rssCategory.Name);
					this.writer.WriteEndElement();
				}
			}
			IL_02A4:
			bool flag8 = this.rssVersion == RssVersion.RSS20;
			if (flag8)
			{
				this.WriteElement("author", item.Author, false);
				this.WriteElement("comments", item.Comments, false);
				bool flag9 = item.Guid != null && item.Guid.Name != "";
				if (flag9)
				{
					this.writer.WriteStartElement("guid");
					try
					{
						this.WriteAttribute("isPermaLink", (bool)item.Guid.PermaLink, false);
					}
					catch
					{
					}
					this.writer.WriteString(item.Guid.Name);
					this.writer.WriteEndElement();
				}
				this.WriteElement("pubDate", item.PubDate, false);
				foreach (object obj2 in this._rssModules)
				{
					RssModule rssModule = (RssModule)obj2;
					bool flag10 = rssModule.IsBoundTo(channelHashCode);
					if (flag10)
					{
						foreach (object obj3 in rssModule.ItemExtensions)
						{
							RssModuleItemCollection rssModuleItemCollection = (RssModuleItemCollection)obj3;
							bool flag11 = rssModuleItemCollection.IsBoundTo(item.GetHashCode());
							if (flag11)
							{
								this.writeSubElements(rssModuleItemCollection, rssModule.NamespacePrefix);
							}
						}
					}
				}
			}
			this.writer.WriteEndElement();
			this.writer.Flush();
		}

		// Token: 0x0600089A RID: 2202 RVA: 0x00034FF4 File Offset: 0x000331F4
		public void Close()
		{
			bool flag = this.writer == null;
			if (flag)
			{
				throw new InvalidOperationException("RssWriter has been closed, and can not be closed again.");
			}
			bool flag2 = !this.wroteChannel;
			if (flag2)
			{
				throw new InvalidOperationException("Can't close RssWriter without first writing a channel.");
			}
			this.writer.WriteEndElement();
			this.writer.WriteEndElement();
			this.writer.Close();
			this.writer = null;
		}

		// Token: 0x17000224 RID: 548
		// (get) Token: 0x0600089B RID: 2203 RVA: 0x00035060 File Offset: 0x00033260
		// (set) Token: 0x0600089C RID: 2204 RVA: 0x00035078 File Offset: 0x00033278
		public RssVersion Version
		{
			get
			{
				return this.rssVersion;
			}
			set
			{
				bool flag = this.wroteStartDocument;
				if (flag)
				{
					throw new InvalidOperationException("Can't change version number after data has been written.");
				}
				this.rssVersion = value;
			}
		}

		// Token: 0x17000225 RID: 549
		// (get) Token: 0x0600089D RID: 2205 RVA: 0x000350A4 File Offset: 0x000332A4
		// (set) Token: 0x0600089E RID: 2206 RVA: 0x000350BC File Offset: 0x000332BC
		public Formatting XmlFormat
		{
			get
			{
				return this.xmlFormat;
			}
			set
			{
				bool flag = this.wroteStartDocument;
				if (flag)
				{
					throw new InvalidOperationException("Can't change XML formatting after data has been written.");
				}
				this.xmlFormat = value;
			}
		}

		// Token: 0x17000226 RID: 550
		// (get) Token: 0x0600089F RID: 2207 RVA: 0x000350E8 File Offset: 0x000332E8
		// (set) Token: 0x060008A0 RID: 2208 RVA: 0x00035100 File Offset: 0x00033300
		public int XmlIndentation
		{
			get
			{
				return this.xmlIndentation;
			}
			set
			{
				bool flag = this.wroteStartDocument;
				if (flag)
				{
					throw new InvalidOperationException("Can't change XML indentation after data has been written.");
				}
				bool flag2 = value < 0;
				if (flag2)
				{
					throw new ArgumentException("Setting this property to a negative value.");
				}
				this.xmlIndentation = value;
			}
		}

		// Token: 0x060008A1 RID: 2209 RVA: 0x0003513D File Offset: 0x0003333D
		public void Write(RssChannel channel)
		{
			this.writeChannel(channel);
		}

		// Token: 0x060008A2 RID: 2210 RVA: 0x00035148 File Offset: 0x00033348
		public void Write(RssItem item)
		{
			this.writeItem(item, -1);
		}

		// Token: 0x17000227 RID: 551
		// (get) Token: 0x060008A3 RID: 2211 RVA: 0x00035154 File Offset: 0x00033354
		// (set) Token: 0x060008A4 RID: 2212 RVA: 0x0003516C File Offset: 0x0003336C
		public RssModuleCollection Modules
		{
			get
			{
				return this._rssModules;
			}
			set
			{
				this._rssModules = value;
			}
		}

		// Token: 0x060008A5 RID: 2213 RVA: 0x00035178 File Offset: 0x00033378
		private void WriteElement(string localName, DateTime input, bool required)
		{
			bool flag = input != RssDefault.DateTime;
			if (flag)
			{
				this.writer.WriteElementString(localName, XmlConvert.ToString(input, "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'"));
			}
			else if (required)
			{
				throw new ArgumentException(localName + " can not be null.");
			}
		}

		// Token: 0x060008A6 RID: 2214 RVA: 0x000351C8 File Offset: 0x000333C8
		private void WriteElement(string localName, int input, bool required)
		{
			bool flag = input != -1;
			if (flag)
			{
				this.writer.WriteElementString(localName, XmlConvert.ToString(input));
			}
			else if (required)
			{
				throw new ArgumentException(localName + " can not be null.");
			}
		}

		// Token: 0x060008A7 RID: 2215 RVA: 0x0003520C File Offset: 0x0003340C
		private void WriteElement(string localName, string input, bool required)
		{
			bool flag = input != "";
			if (flag)
			{
				this.writer.WriteElementString(localName, input);
			}
			else if (required)
			{
				throw new ArgumentException(localName + " can not be null.");
			}
		}

		// Token: 0x060008A8 RID: 2216 RVA: 0x00035250 File Offset: 0x00033450
		private void WriteElement(string localName, Uri input, bool required)
		{
			bool flag = input != RssDefault.Uri;
			if (flag)
			{
				this.writer.WriteElementString(localName, input.ToString());
			}
			else if (required)
			{
				throw new ArgumentException(localName + " can not be null.");
			}
		}

		// Token: 0x060008A9 RID: 2217 RVA: 0x00035298 File Offset: 0x00033498
		private void WriteElement(string localName, object input, bool required)
		{
			bool flag = input != null;
			if (flag)
			{
				this.writer.WriteElementString(localName, input.ToString());
			}
			else if (required)
			{
				throw new ArgumentException(localName + " can not be null.");
			}
		}

		// Token: 0x060008AA RID: 2218 RVA: 0x000352DC File Offset: 0x000334DC
		private void WriteAttribute(string localName, DateTime input, bool required)
		{
			bool flag = input != RssDefault.DateTime;
			if (flag)
			{
				this.writer.WriteAttributeString(localName, XmlConvert.ToString(input, "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'"));
			}
			else if (required)
			{
				throw new ArgumentException(localName + " can not be null.");
			}
		}

		// Token: 0x060008AB RID: 2219 RVA: 0x0003532C File Offset: 0x0003352C
		private void WriteAttribute(string localName, int input, bool required)
		{
			bool flag = input != -1;
			if (flag)
			{
				this.writer.WriteAttributeString(localName, XmlConvert.ToString(input));
			}
			else if (required)
			{
				throw new ArgumentException(localName + " can not be null.");
			}
		}

		// Token: 0x060008AC RID: 2220 RVA: 0x00035370 File Offset: 0x00033570
		private void WriteAttribute(string localName, string input, bool required)
		{
			bool flag = input != "";
			if (flag)
			{
				this.writer.WriteAttributeString(localName, input);
			}
			else if (required)
			{
				throw new ArgumentException(localName + " can not be null.");
			}
		}

		// Token: 0x060008AD RID: 2221 RVA: 0x000353B4 File Offset: 0x000335B4
		private void WriteAttribute(string localName, Uri input, bool required)
		{
			bool flag = input != RssDefault.Uri;
			if (flag)
			{
				this.writer.WriteAttributeString(localName, input.ToString());
			}
			else if (required)
			{
				throw new ArgumentException(localName + " can not be null.");
			}
		}

		// Token: 0x060008AE RID: 2222 RVA: 0x000353FC File Offset: 0x000335FC
		private void WriteAttribute(string localName, object input, bool required)
		{
			bool flag = input != null;
			if (flag)
			{
				this.writer.WriteAttributeString(localName, input.ToString());
			}
			else if (required)
			{
				throw new ArgumentException(localName + " can not be null.");
			}
		}

		// Token: 0x060008AF RID: 2223 RVA: 0x00035440 File Offset: 0x00033640
		private void writeSubElements(RssModuleItemCollection items, string NamespacePrefix)
		{
			foreach (object obj in items)
			{
				RssModuleItem rssModuleItem = (RssModuleItem)obj;
				bool flag = rssModuleItem.SubElements.Count == 0;
				if (flag)
				{
					this.WriteElement(NamespacePrefix + ":" + rssModuleItem.Name, rssModuleItem.Text, rssModuleItem.IsRequired);
				}
				else
				{
					this.writer.WriteStartElement(NamespacePrefix + ":" + rssModuleItem.Name);
					this.writeSubElements(rssModuleItem.SubElements, NamespacePrefix);
					this.writer.WriteEndElement();
				}
			}
		}

		// Token: 0x04000513 RID: 1299
		private XmlTextWriter writer = null;

		// Token: 0x04000514 RID: 1300
		private bool wroteStartDocument = false;

		// Token: 0x04000515 RID: 1301
		private bool wroteChannel = false;

		// Token: 0x04000516 RID: 1302
		private RssVersion rssVersion = RssVersion.RSS20;

		// Token: 0x04000517 RID: 1303
		private Formatting xmlFormat = Formatting.Indented;

		// Token: 0x04000518 RID: 1304
		private int xmlIndentation = 2;

		// Token: 0x04000519 RID: 1305
		private const string DateTimeFormatString = "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'";

		// Token: 0x0400051A RID: 1306
		private RssModuleCollection _rssModules = new RssModuleCollection();
	}
}
